name: Publish docker image, push into the catalog and update the deployed application
# https://github.com/napptive/cd-example/blob/main/.github/workflows/deploy-app.yml

on:
  push:
    branches:
      - "main"
# Uncommment this to launch the workflow manually.
  workflow_dispatch:

env:
  PLAYGROUND_PAT: ${{ secrets.PLAYGROUND_PAT}}
  PLAYGROUND_APP_NAME: fastapi
  PLAYGROUND_ACCOUNT_NAME: digvijayshelar
  TARGET_DOCKER_REGISTRY: digvijayshelar
  TARGET_DOCKER_IMAGE: fastapi-napptive-playground-py:latest

jobs:
  build:
    name: Push docker images
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Get Version
        id: version
        run: echo "version=v$(cat version)"  >> $GITHUB_OUTPUT
      - name: Set up Python 3.10.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.8'
          architecture: 'x64'
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./.devcontainer/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.TARGET_DOCKER_IMAGE }}
      
  check-app:
    needs: build
    name: Check if the app are deployed
    runs-on: ubuntu-latest
    outputs:
      not-found: ${{ steps.not-found.outputs.found }}
      found: ${{ steps.found.outputs.found }}
      version: ${{ needs.build.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Check if the app exists        
        uses: napptive-actions/playground-github-action@v5.0.0
        continue-on-error: true
        id: check
        with:
          cmd: "apps info fastapi"
      - name: Set App not found
        id: not-found
        run: echo 'found=false' >> $GITHUB_OUTPUT
        if: steps.check.outcome != 'success'
      - name: Set App found
        id: found
        run: echo 'found=true' >> $GITHUB_OUTPUT
        if: steps.check.outcome == 'success'

  push-to-catalog:
    needs: build
    name: Push the application to the catalog
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Render version Kubernetes OAM files
      run: python ./scripts/update_version.py
    - name: Push the application on the catalog
      uses: napptive-actions/catalog-push-action@v5.0.0
      with:
        applicationPath: ./deployments/
        namespace: ${{ env.PLAYGROUND_ACCOUNT_NAME }}
        applicationName: ${{ env.PLAYGROUND_APP_NAME }}
        tag: ${{ needs.build.outputs.version }}

  update-app:
    name: Update application
    needs: check-app
    runs-on: ubuntu-latest
    # if the application aready exists -> update it
    if: ${{ needs.check-app.outputs.found == 'true' }}
    steps:     
    - name: Check out code
      uses: actions/checkout@v3
    - name: Get Kubeconfig      
      uses: napptive-actions/playground-github-action@v5.0.0
      with:
        cmd: "get-kubeconfig" 
    - name: Deploy new version of the application
      run: |
        if [[ -z "${PLAYGROUND_PAT}" ]]; then
          echo "PLAYGROUND_PAT must be set with your Personal Access Token"
          return 1
        else
          echo "PLAYGROUND_PAT is set."
        fi

        echo "Downloading NAPPTIVE Playground CLI"
        curl -O https://storage.googleapis.com/artifacts.playground.napptive.dev/installer.sh && bash installer.sh

        echo "Downloading Kubectl"
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl

        echo "Login into NAPPTIVE Playground"
        playground login --pat 

        export PATH=$PATH:$(pwd)

        echo "Forcing rolling update to download newest image"
        IMAGE="${TARGET_DOCKER_REGISTRY}/${TARGET_DOCKER_IMAGE}"
        echo "Update image... ${IMAGE}"
        PATCH="{\"spec\":{\"template\":{\"spec\": {\"containers\": [{\"name\":\"${PLAYGROUND_APP_NAME}-comp\", \"image\":\"${IMAGE}\"}]}}}}"
        kubectl --kubeconfig napptive-kubeconfig patch deployment ${PLAYGROUND_APP_NAME}-comp -p "${PATCH}" --type=merge
        #kubectl --kubeconfig napptive-kubeconfig get deployment fastapi-comp --output yaml


  deploy-app:
    name: Deploy application from catalog
    needs:
      - push-to-catalog
      - check-app
    runs-on: ubuntu-latest
    if: ${{ needs.check-app.outputs.not-found == 'false' }}
    steps: 
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set catalog qualified application name
      id: appname
      run: echo "appname=${PLAYGROUND_ACCOUNT_NAME}/${PLAYGROUND_APP_NAME}:${VERSION}" >> $GITHUB_OUTPUT
      env:
        VERSION: ${{ needs.check-app.outputs.version }}
        PLAYGROUND_APP_NAME: ${{ env.PLAYGROUND_APP_NAME }}
    - name: Deploy the app from the catalog
      uses: napptive-actions/catalog-deploy-action@v5.0.0
      env:
          PLAYGROUND_PAT: ${{ secrets.PLAYGROUND_PAT }}
      with:        
        appName: ${{ steps.appname.outputs.appname }}
